create.c:
	 - does a simple file create and a halt
	 - Should create a file named "CreateFileTest.txt" in the test directory
open.c:
	-creates a file (CreateNewTestFile.txt)
	-closes the file
	-opens the file that was created
	-opens a file that does not exist (FileNotFoundError.txt)
	-closes the first open file
	-closes the second open file

openClose.c
	-opens a file that does not yet exist, which should create the file (TestReadFile.log)
	-close the file
	-close file descriptor 0
	-close file descriptor 1
	
createClose.c:
	-creates a test file (CreateOpenCloseTestFile.txt)
	-closes the file using the file descriptor

read.c
	-opens a file to read (TestReadFile.log)
	-read the file to buffer
	-closes the file read

write.c
	-opens a file to write to write to (TestReadFile.log)
	-writes to buffer
	-closes the file read

unlink
	-calls unlink on the file created by create.c (CreateFileTest.txt)


readStream.c
	-reads from standard input
(run nachos -d ma -x readStream.coff, type q, the console will wait for 5 bytes before returning and the console will display what was read)

writeStream.c
	-writes text to the standard output

stdInStdOutTest.c
	-writes text to standard output
	-reads text from standard input
	-writes text to standard output
	-closes file descriptors 0/1
	-try to write to standard output after descriptor was closed (which should return -1 since the stream was closed)



Cases to still try:
call open on a file that the process already has opened


Readme for testing join and exit.
The code joinTest is used for testing the join command. The c file will launch a shJoin.coff process,
and this process in turn is nothing but a shell, will launch another process called as sort and obtain
the process id of the sort method and join the method. 

Readme for the exec command
For testing the exec in the sh.c main method I invoke the two sort processes in the background
one after the other and they both run into completion without any memory page violation. 

